@model MegatubeV2.User

@{
    ViewBag.Title = "Edit";

    //fill payment method array with payment method names
    string[] paymentMethodArr = new string[5];
    paymentMethodArr[0] = " - ";
    for (int i = 1; i < paymentMethodArr.Length; i++)
    {
        paymentMethodArr[i] = PaymentMethodFactory.GetMethodFromDBCode((short)i).ToString();
    }
    bool loggedUsrIsManager = Session.GetUser().IsManager;
    string disabledInput = "";
    if (!loggedUsrIsManager)
    {
       disabledInput = " disabledInput";
    }
}

<div class="page-header">
    <h2>Edit Contact Informations</h2>
</div>

<div class="row m-t-1">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control"+disabledInput} })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <label class="control-label col-md-2" for="LastName">Last Name</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" + disabledInput } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EMail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EMail, new { htmlAttributes = new { @class = "form-control" + disabledInput } })
                    @Html.ValidationMessageFor(model => model.EMail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Skype, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Skype, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Skype, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @{ 

                        string birthDate = "";
                        if (Model.BirthDate != null)
                        {
                            birthDate = ((DateTime)Model.BirthDate).ToString("yyyy-MM-dd");
                        }
                    }
                    <input class="form-control text-box single-line @disabledInput" data-val="true" data-val-date="Il campo Birth Date deve essere una data." id="BirthDate" name="BirthDate" type="date" value=@birthDate />
                    @*@Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })*@
                </div>

                <label class="control-label col-md-2" for="BirthPlace">Birth Place</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.BirthPlace, new { htmlAttributes = new { @class = "form-control" + disabledInput } })
                    @Html.ValidationMessageFor(model => model.BirthPlace, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2" for="CompanyName">Company Name</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>

                <label class="control-label col-md-2" for="CompanyKind">Company Kind</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.CompanyKind, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CompanyKind, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IBAN, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.IBAN, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IBAN, "", new { @class = "text-danger" })
                </div>

                <label class="control-label col-md-2" for="PIVAorVAT">PIVA or VAT</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.PIVAorVAT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PIVAorVAT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2" for="FullAddress">Full Address</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FullAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FullAddress, "", new { @class = "text-danger" })
                </div>

                <label class="control-label col-md-2" for="PostalCode">Postal Code</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2" for="PaymentMethod">Payment Method</label>
                <div class="col-md-4">
                    <select class="form-control @disabledInput" id="FiscalAdministratorId" name="PaymentMethod" id="PaymentMethod">
                        @{
                            string selected = "";
                            for (int i = 0; i < paymentMethodArr.Length; i++)
                            {
                                selected = (i == Model.PaymentMethod ? " selected" : "");
                                @Html.Raw("<option value=\"" + i + "\"" + selected + "> " + paymentMethodArr[i] + "</option>")
                            }

                        }
                    </select>
                </div>

                <label class="control-label col-md-2" for="BICSWIFT">BIC/SWIFT</label>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.BICSWIFT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BICSWIFT, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (loggedUsrIsManager)
            {
            <div class="form-group">
                <label class="control-label col-md-2" for="FiscalAdministratorId">Administrator</label>
                <div class="col-md-4">
                    @Html.DropDownList("FiscalAdministratorId", null, "-", htmlAttributes: new { @class = "form-control select2 select2-input" })
                    @Html.ValidationMessageFor(model => model.FiscalAdministratorId, "", new { @class = "text-danger" })
                </div>

                <label class="control-label col-md-2">Role</label>
                <div class="col-md-4">
                    @Html.DropDownList("RoleId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                </div>
            </div>
            }


            <hr />
            <div class="form-group">
                <div class="col-sm-12 text-right">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        </div>
                            }
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="//cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.full.js"></script>

<script language="javascript">
    $(document).ready(function () {
        $('#breadCrumbOl').append('<li><a href="@Url.Action("Details", new { Id = Model.Id })">@Html.DisplayFor(model => model.Name) @Html.DisplayFor(model => model.LastName)</a></li>');
        $('#breadCrumbOl').append('<li class="active">Edit</li>');

        $(".disabledInput").attr('disabled', 'disabled');

        $('.select2-input').select2();

        if ($('.select2-input').length === 0) {
            return;
        }

        $('.select2-input').on("select2:open", function () {
            if ($(this).parents("[class*='has-']").length) {
                var classNames = $(this).parents("[class*='has-']")[0].className.split(/\s+/);

                for (var i = 0; i < classNames.length; ++i) {
                    if (classNames[i].match("has-")) {
                        $("body > .select2-container").addClass(classNames[i]);
                    }
                }
            }
        }).select2({
            theme: "bootstrap"
            });

        /*$('#BirthDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true
        });*/

    });
</script>
